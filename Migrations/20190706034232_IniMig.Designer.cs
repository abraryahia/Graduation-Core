// <auto-generated />
using System;
using Graduation_Core.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Graduation_Core.Migrations
{
    [DbContext(typeof(DMSContext))]
    [Migration("20190706034232_IniMig")]
    partial class IniMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Graduation_Core.Models.Calculations", b =>
                {
                    b.Property<int>("CalcId")
                        .HasColumnName("Calc_ID");

                    b.Property<double>("CalcEarly")
                        .HasColumnName("Calc_Early");

                    b.Property<double>("CalcFragile")
                        .HasColumnName("Calc_fragile");

                    b.Property<double>("CalcWeight")
                        .HasColumnName("Calc_Weight");

                    b.HasKey("CalcId");

                    b.ToTable("Calculations");
                });

            modelBuilder.Entity("Graduation_Core.Models.City", b =>
                {
                    b.Property<int>("CId")
                        .HasColumnName("C_ID");

                    b.Property<double>("CLat")
                        .HasColumnName("C_Lat");

                    b.Property<double>("CLong")
                        .HasColumnName("C_Long");

                    b.Property<string>("CName")
                        .HasColumnName("C_Name")
                        .HasMaxLength(30);

                    b.Property<string>("DayOfTravel")
                        .IsRequired()
                        .HasColumnName("Day_Of_Travel")
                        .HasMaxLength(50);

                    b.HasKey("CId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Graduation_Core.Models.CityDetails", b =>
                {
                    b.Property<int>("CDId")
                        .HasColumnName("C_D_ID");

                    b.Property<int>("CId")
                        .HasColumnName("C_ID");

                    b.Property<string>("TCName")
                        .IsRequired()
                        .HasColumnName("T_C_NAME")
                        .HasMaxLength(100);

                    b.HasKey("CDId");

                    b.HasIndex("CId");

                    b.ToTable("City_Details");
                });

            modelBuilder.Entity("Graduation_Core.Models.Employee", b =>
                {
                    b.Property<long>("EmpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("Emp_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EmpAddress")
                        .IsRequired()
                        .HasColumnName("Emp_ADDRESS")
                        .HasMaxLength(50);

                    b.Property<string>("EmpAddressDetails")
                        .HasColumnName("Emp_ADDRESS_DETAILS")
                        .HasMaxLength(150);

                    b.Property<int>("EmpCId")
                        .HasColumnName("Emp_C_ID");

                    b.Property<string>("EmpEmail")
                        .HasColumnName("Emp_EMAIL")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<int?>("EmpLId")
                        .HasColumnName("Emp_L_ID");

                    b.Property<string>("EmpMobile")
                        .IsRequired()
                        .HasColumnName("Emp_MOBILE")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("EmpName")
                        .IsRequired()
                        .HasColumnName("Emp_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("EmpSsn")
                        .IsRequired()
                        .HasColumnName("Emp_SSN")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("EmpId");

                    b.HasIndex("EmpCId");

                    b.HasIndex("EmpLId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("Graduation_Core.Models.Locations", b =>
                {
                    b.Property<int>("LId")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("L_ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CId")
                        .HasColumnName("C_ID");

                    b.Property<string>("LFrom")
                        .IsRequired()
                        .HasColumnName("L_FROM")
                        .HasMaxLength(50);

                    b.Property<string>("LTo")
                        .IsRequired()
                        .HasColumnName("L_TO")
                        .HasMaxLength(50);

                    b.Property<int>("Price")
                        .HasColumnName("PRICE");

                    b.HasKey("LId");

                    b.HasIndex("CId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("Graduation_Core.Models.PackagesInfo", b =>
                {
                    b.Property<long>("PId")
                        .HasColumnName("P_ID");

                    b.Property<DateTime?>("Deleverydate")
                        .HasColumnName("DELEVERYDATE")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnName("DESCRIPTION")
                        .HasMaxLength(150);

                    b.Property<string>("Earlydelivery")
                        .HasColumnName("EARLYDELIVERY")
                        .HasMaxLength(50);

                    b.Property<string>("PDeliverStatus")
                        .IsRequired()
                        .HasColumnName("P_DELIVER_STATUS")
                        .HasMaxLength(50);

                    b.Property<string>("PFaragial")
                        .IsRequired()
                        .HasColumnName("P_FARAGIAL")
                        .HasMaxLength(50);

                    b.Property<int>("PLId")
                        .HasColumnName("P_L_ID");

                    b.Property<double>("PPrice")
                        .HasColumnName("P_PRICE");

                    b.Property<int>("PWeight")
                        .HasColumnName("P_WEIGHT");

                    b.Property<string>("RSsn")
                        .IsRequired()
                        .HasColumnName("R_SSN")
                        .HasMaxLength(50);

                    b.Property<string>("SSsn")
                        .IsRequired()
                        .HasColumnName("S_SSN")
                        .HasMaxLength(50);

                    b.HasKey("PId");

                    b.ToTable("Packages_Info");
                });

            modelBuilder.Entity("Graduation_Core.Models.ReceiverInfo", b =>
                {
                    b.Property<long>("RId")
                        .HasColumnName("R_ID");

                    b.Property<string>("RAddress")
                        .IsRequired()
                        .HasColumnName("R_ADDRESS")
                        .HasMaxLength(50);

                    b.Property<string>("RAddressDetail")
                        .HasColumnName("R_ADDRESS_DETAIL")
                        .HasMaxLength(250);

                    b.Property<int>("RCDId")
                        .HasColumnName("R_C_D_ID");

                    b.Property<int>("RCId")
                        .HasColumnName("R_C_ID");

                    b.Property<string>("REmail")
                        .HasColumnName("R_EMAIL")
                        .HasMaxLength(50);

                    b.Property<string>("RMobile")
                        .IsRequired()
                        .HasColumnName("R_MOBILE")
                        .HasMaxLength(50);

                    b.Property<string>("RName")
                        .IsRequired()
                        .HasColumnName("R_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("RSsn")
                        .IsRequired()
                        .HasColumnName("R_SSN")
                        .HasMaxLength(50);

                    b.Property<long>("SId")
                        .HasColumnName("S_ID");

                    b.HasKey("RId");

                    b.HasIndex("SId");

                    b.ToTable("Receiver_Info");
                });

            modelBuilder.Entity("Graduation_Core.Models.SenderInfo", b =>
                {
                    b.Property<long>("SId")
                        .HasColumnName("S_ID");

                    b.Property<string>("SAddress")
                        .IsRequired()
                        .HasColumnName("S_ADDRESS")
                        .HasMaxLength(50);

                    b.Property<string>("SAddressDetail")
                        .HasColumnName("S_ADDRESS_DETAIL")
                        .HasMaxLength(150);

                    b.Property<int>("SCDId")
                        .HasColumnName("S_C_D_ID");

                    b.Property<int>("SCId")
                        .HasColumnName("S_C_ID");

                    b.Property<string>("SEmail")
                        .HasColumnName("S_EMAIL")
                        .HasMaxLength(50);

                    b.Property<string>("SMobile")
                        .IsRequired()
                        .HasColumnName("S_MOBILE")
                        .HasMaxLength(50);

                    b.Property<string>("SName")
                        .IsRequired()
                        .HasColumnName("S_NAME")
                        .HasMaxLength(50);

                    b.Property<string>("SSsn")
                        .IsRequired()
                        .HasColumnName("S_SSN")
                        .HasMaxLength(50);

                    b.HasKey("SId");

                    b.ToTable("Sender_Info");
                });

            modelBuilder.Entity("Graduation_Core.Models.UsersDetails", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnName("USER_ID");

                    b.Property<int>("Count");

                    b.Property<int?>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("UserFullName")
                        .HasColumnName("USER_FULL_NAME")
                        .HasMaxLength(100);

                    b.Property<string>("UserPassword")
                        .HasColumnName("USER_PASSWORD")
                        .HasMaxLength(50);

                    b.Property<string>("UsrName")
                        .HasColumnName("USR_NAME")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.HasKey("UserId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users_Details");
                });

            modelBuilder.Entity("Graduation_Core.Models.UsersRoles", b =>
                {
                    b.Property<int>("RoleId")
                        .HasColumnName("ROLE_ID");

                    b.Property<string>("DeleteAllowed")
                        .HasColumnName("DELETE_ALLOWED")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("InsertAllowed")
                        .HasColumnName("INSERT_ALLOWED")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("QueryAllowed")
                        .HasColumnName("QUERY_ALLOWED")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.Property<string>("RoleDesc")
                        .HasColumnName("ROLE_DESC")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("RoleName")
                        .HasColumnName("ROLE_NAME")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("UpdateAllowed")
                        .HasColumnName("UPDATE_ALLOWED")
                        .HasMaxLength(5)
                        .IsUnicode(false);

                    b.HasKey("RoleId");

                    b.ToTable("Users_Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Graduation_Core.Models.CityDetails", b =>
                {
                    b.HasOne("Graduation_Core.Models.City", "C")
                        .WithMany("CityDetails")
                        .HasForeignKey("CId")
                        .HasConstraintName("FK_City_Details_City");
                });

            modelBuilder.Entity("Graduation_Core.Models.Employee", b =>
                {
                    b.HasOne("Graduation_Core.Models.City", "EmpC")
                        .WithMany("Employee")
                        .HasForeignKey("EmpCId")
                        .HasConstraintName("FK_Employee_City");

                    b.HasOne("Graduation_Core.Models.Locations", "EmpL")
                        .WithMany("Employee")
                        .HasForeignKey("EmpLId")
                        .HasConstraintName("FK_Employee_Locations");
                });

            modelBuilder.Entity("Graduation_Core.Models.Locations", b =>
                {
                    b.HasOne("Graduation_Core.Models.City", "C")
                        .WithMany("Locations")
                        .HasForeignKey("CId")
                        .HasConstraintName("FK_Locations_City");
                });

            modelBuilder.Entity("Graduation_Core.Models.ReceiverInfo", b =>
                {
                    b.HasOne("Graduation_Core.Models.SenderInfo", "S")
                        .WithMany("ReceiverInfo")
                        .HasForeignKey("SId")
                        .HasConstraintName("FK_Receiver_Info_Sender_Info");
                });

            modelBuilder.Entity("Graduation_Core.Models.UsersDetails", b =>
                {
                    b.HasOne("Graduation_Core.Models.UsersRoles", "Role")
                        .WithMany("UsersDetails")
                        .HasForeignKey("RoleId")
                        .HasConstraintName("FK_Users_Details_Users_Roles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
