@model Graduation_Core.Models.CoordiantesModel

@{
    ViewData["Title"] = "Track";

}

<!DOCTYPE html>
<html>

<head>
    <title>TrackPackage</title>
    <meta charset="utf-8" />
    <meta http-equiv="x-ua-compatible" content="IE=Edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no" />
    <meta name="description" content="This tutorial shows how to calculate a route and display it on the map." />
    <meta name="keywords" content="map, gis, API, SDK, services, module, tutorials, routing, directions, route, truck, commercial vehicle" />
    <meta name="author" content="Microsoft Azure Maps" />

    <!-- Add references to the Azure Maps Map control JavaScript and CSS files. -->
    <link rel="stylesheet" href="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.css" type="text/css" />
    <script src="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas.min.js"></script>

    <!-- Add a reference to the Azure Maps Services Module JavaScript file. -->
    <script src="https://atlas.microsoft.com/sdk/javascript/mapcontrol/2/atlas-service.min.js"></script>

    <script>
        var map, datasource, client;
        function GetMap() {
            // Instantiate a map object
            var map = new atlas.Map('myMap', {
                //Add your Azure Maps subscription key to the map SDK. Get an Azure Maps key at https://azure.com/maps
                authOptions: {
                    authType: 'subscriptionKey',
                    subscriptionKey: 'qrkBTZt1h2LhYaQqVUeXcZbUUjT1Bm40F9_8sv0fpX0'
                }
            });
            //Wait until the map resources are ready.
            map.events.add('ready', function () {
                //Create a data source and add it to the map.
                datasource = new atlas.source.DataSource();
                map.sources.add(datasource);
                //Add a layer for rendering the route lines and have it render under the map labels.
                map.layers.add(new atlas.layer.LineLayer(datasource, null, {
                    strokeColor: '#2272B9',
                    strokeWidth: 5,
                    lineJoin: 'round',
                    lineCap: 'round'
                }), 'labels');
                //Add a layer for rendering point data.
                map.layers.add(new atlas.layer.SymbolLayer(datasource, null, {
                    iconOptions: {
                        image: ['get', 'icon'],
                        allowOverlap: true
                    },
                    textOptions: {
                        textField: ['get', 'title'],
                        offset: [0, 1.2]
                    },
                    filter: ['any', ['==', ['geometry-type'], 'Point'], ['==', ['geometry-type'], 'MultiPoint']] //Only render Point or MultiPoints in this layer.
                }));
                //Create the GeoJSON objects which represent the start and end points of the route.

            var startPoint = new atlas.data.Feature(new atlas.data.Point([@Model.FLong, @Model.FLat]), {
                });
                

                var endPoint = new atlas.data.Feature(new atlas.data.Point([ @Model.TLong , @Model.TLat]), {

                });
                //Add the data to the data source.
                datasource.add([startPoint, endPoint]);
                map.setCamera({
                    bounds: atlas.data.BoundingBox.fromData([startPoint, endPoint]),
                    padding: 80
                });
                // Use SubscriptionKeyCredential with a subscription key
                var subscriptionKeyCredential = new atlas.service.SubscriptionKeyCredential(atlas.getSubscriptionKey());
                // Use subscriptionKeyCredential to create a pipeline
                var pipeline = atlas.service.MapsURL.newPipeline(subscriptionKeyCredential);
                // Construct the RouteURL object
                var routeURL = new atlas.service.RouteURL(pipeline);
                //Start and end point input to the routeURL
                var coordinates = [[startPoint.geometry.coordinates[0], startPoint.geometry.coordinates[1]], [endPoint.geometry.coordinates[0], endPoint.geometry.coordinates[1]]];
                //Make a search route request
                routeURL.calculateRouteDirections(atlas.service.Aborter.timeout(10000), coordinates).then((directions) => {
                    //Get data features from response
                    var data = directions.geojson.getFeatures();
                    datasource.add(data);
                });
            });
        }
    </script>
 
</head>

<body onload="GetMap()" >
</body>

</html>
<a asp-action="index" asp-controller="home" class="btn btn-secondary">Back</a>
<div onload="GetMap()" id="myMap" class="col-lg-8 mx-auto "></div>